#define set_ms(V)		(getreinput(V))
#define his_or_her(C)		(psex(C) ? "her" : "his")

#define	sizeof_player		16
#define	p_ofs(Q)		(sizeof_player * (Q))
#define pscore(C)		(ublock[p_ofs(C) + 15])
#define setpscore(C, V)		(pscore(C) = (V))
#define pfighting(C)		(ublock[p_ofs(C) + 14])
#define phelping(C)		(ublock[p_ofs(C) + 13])
#define setphelping(C, V)	(phelping(C) = (V))
#define psitting(C)		(ublock[p_ofs(C) + 12])
#define setpsitting(C, V)	(psitting(C) = (V))
#define pwpn(C)			(ublock[p_ofs(C) + 11])
#define setpwpn(C, V)		(pwpn(C) = (V))
#define plev(C)			(ublock[p_ofs(C) + 10])
#define setplev(C, V)		(plev(C) = (V))
#define	pfl(X)			(1 << PFL_##X)
#define pflags(Z)		(ublock[p_ofs(Z) + 9])
#define psexall(C)		pflags(C)
#define pclrflg(C, V)		(pflags(C) &= ~(V))
#define	_pclrflg(C, V)		pclrflg(C, (1 << (V)))
#define psetflg(C, V)		(pflags(C) |= (V))
#define	_psetflg(C, V)		psetflg(C, (1 << (V)))
#define ptstflg(C, V)		(pflags(C) & (V))
#define	_ptstflg(C, V)		ptstflg(C, (1 << (V)))
#define pxorflg(C, V)		((pflags(C) ^= (V)) & (V))
#define	_pxorflg(C, V)		pxorflg(C, (1 << (V)))
#define setpflags(C, V)		(pflags(C) = (V))
#define	setpsexall(C, V)	setpflags(C, V)
#define psex(C)			ptstflg(C, pfl(Female))
#define pvis(C)			(ublock[p_ofs(C) + 8])
#define setpvis(C, V)		(pvis(C) = (V))
#define pstr(C)			(ublock[p_ofs(C) + 7])
#define setpstr(C, V)		(pstr(C) = (V))
#define ppos(C)			(ublock[p_ofs(C) + 5])
#define setppos(C, V)		(ppos(C) = (V))
#define ploc(C)			(ublock[p_ofs(C) + 4])
#define setploc(C, V)		(ploc(C) = (V))

/* Action flags: Hostile, Target, All, ... */
#define asetflg(A, V)		(action_flags[A] |= (1 << (V)))
#define atstflg(A, V)		(action_flags[A] & (1 << (V)))

/* Location flags */
#define	lfl(X)			(1 << LFL_##X)
#define	lflags(Z)		(room_data[convroom(Z)].r_flags)
#define lclrflg(L, V)		(lflags(L) &= ~(V))
#define _lclrflg(L, V)		lclrflg(L, (1 << (V)))
#define lsetflg(L, V)		(lflags(L) |= (V))
#define _lsetflg(L, V)		lsetflg(L, (1 << (V)))
#define ltstflg(L, V)		(lflags(L) & (V))
#define _ltstflg(L, V)		ltstflg(L, (1 << (V)))

#define sizeof_object		5
#define	o_ofs(X)		(sizeof_object * (X))
#define obyte(O, V)		(byte_fetch(objinfo[o_ofs(O) + 2], (V)))
#define osetbyte(O, x, y)	(byte_put(&objinfo[o_ofs(O) + 2], x, y))
#define	ofl(X)			(1 << OFL_##X)
#define oflags(Z)		objinfo[o_ofs(Z) + 3]
#define	otstbit(O, V)		(oflags(O) & (V))
#define	_otstbit(O, V)		otstbit(O, (1 << (V)))
#define	oclrbit(O, V)		(oflags(O) &= ~(V))
#define	_oclrbit(O, V)		oclrbit(O, (1 << (V)))
#define	osetbit(O, V)		(oflags(O) |= (V))
#define	_osetbit(O, V)		osetbit(O, (1 << (V)))
#define oloc(O)			(objinfo[o_ofs(O) + 0])
#define state(O)		(objinfo[o_ofs(O) + 1])
#define ocarrf(O)		(objinfo[o_ofs(O) + 4])
#define olongt(O, V)		(objects[O].o_desc[V])
#define omaxstate(O)		(objects[O].o_maxstate)
#define oaltname(O)		(objects[O].o_altname)
#define osize(O)		(objects[O].o_size)
#define oflannel(O)		(objects[O].o_flannel)
#define obaseval(O)		(objects[O].o_value)

#define	readline(s,l)	do { key_input("", l); strcpy(s, key_buff); } while (0)

